{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Admin/Desktop/Project/LoginExperiment/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet EmployeeListComponent = class EmployeeListComponent {\n  constructor(adminService, route) {\n    this.adminService = adminService;\n    this.route = route;\n    this.selectedValue = '';\n    this.radiovalue = ''; // ridesAvailableList=[\"cab1\",\"cab2\",\"cab3\"];\n\n    this.PickUpridesAvailableList = [];\n    this.DropridesAvailableList = [];\n    this.employeePickUpList = [];\n    this.employeeDropList = [];\n  }\n\n  ngOnInit() {\n    //This code subscribes to service defined in /service/admin ---Used to populate the table with the list of employees that opt for cab service\n    this.adminService.getEmployeePickUpDetails().subscribe(data => {\n      this.employeePickUpList = data;\n      console.log(this.employeePickUpList);\n    }); //Sends the value selected in the drop down to the API\n\n    this.adminService.getEmployeeDropDetails().subscribe(data => {\n      this.employeeDropList = data;\n      console.log(this.employeeDropList);\n    }); //used to repopulate the dropdown by calling the API again\n\n    this.adminService.getAvailablePickUpRides().subscribe(data => {\n      this.PickUpridesAvailableList = data;\n      console.log(data);\n      console.log(this.PickUpridesAvailableList);\n    });\n    this.adminService.getAvailableDropRides().subscribe(data => {\n      this.DropridesAvailableList = data;\n      console.log(data);\n      console.log(this.DropridesAvailableList);\n    });\n  }\n\n  myFunctionPickUp(selectValue, puid) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let pickUpObj = {\n        RideId: selectValue,\n        Empid: puid\n      };\n      /*this.adminService.updateCabList(selectValue).subscribe(\r\n      data => {\r\n        console.log(data);\r\n          }\r\n      );*/\n\n      yield _this.adminService.updatePickUpTable(pickUpObj).subscribe(data => {});\n\n      _this.adminService.getAvailablePickUpRides().subscribe(data => {\n        _this.PickUpridesAvailableList = data;\n        console.log(data);\n        console.log(_this.PickUpridesAvailableList);\n      });\n\n      _this.adminService.getAvailablePickUpRides().subscribe(data => {\n        _this.PickUpridesAvailableList = data;\n        console.log(data);\n        console.log(_this.PickUpridesAvailableList);\n      });\n    })();\n  }\n\n  myFunctionDrop(selectValue, puid) {\n    let dropObj = {\n      RideId: selectValue,\n      Empid: puid\n    };\n    this.adminService.updateDropTable(dropObj).subscribe(data => {});\n    this.adminService.getAvailableDropRides().subscribe(data => {\n      this.DropridesAvailableList = data;\n      console.log(data);\n      console.log(this.DropridesAvailableList);\n    });\n    setTimeout(this.adminService.getAvailableDropRides, 4000);\n    this.adminService.getAvailableDropRides().subscribe(data => {\n      this.DropridesAvailableList = data;\n      console.log(data);\n      console.log(this.DropridesAvailableList);\n    });\n  }\n\n  onSubmitPickupRides() {\n    console.log(this.employeePickUpList);\n    alert('DATA SUBMITTED');\n  }\n\n  onSubmitDropRides() {\n    console.log(this.employeeDropList);\n    alert('DATA SUBMITTED');\n  }\n\n};\nEmployeeListComponent = __decorate([Component({\n  selector: 'app-employee-list',\n  templateUrl: './employee-list.component.html',\n  styleUrls: ['./employee-list.component.css']\n})], EmployeeListComponent);\nexport { EmployeeListComponent };","map":{"version":3,"mappings":"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","names":["Component","EmployeeListComponent","constructor","adminService","route","ngOnInit","getEmployeePickUpDetails","subscribe","data","employeePickUpList","console","log","getEmployeeDropDetails","employeeDropList","getAvailablePickUpRides","PickUpridesAvailableList","getAvailableDropRides","DropridesAvailableList","myFunctionPickUp","selectValue","puid","pickUpObj","RideId","Empid","updatePickUpTable","myFunctionDrop","dropObj","updateDropTable","setTimeout","onSubmitPickupRides","alert","onSubmitDropRides","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Admin\\Desktop\\Project\\LoginExperiment\\src\\app\\components\\employee-list\\employee-list.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AvailableRides } from 'src/app/models/available-rides';\nimport { Employee } from 'src/app/models/employee';\nimport { AdminService } from 'src/app/service/admin.service';\n\n@Component({\n  selector: 'app-employee-list',\n  templateUrl: './employee-list.component.html',\n  styleUrls: ['./employee-list.component.css'],\n})\nexport class EmployeeListComponent implements OnInit {\n  selectedValue: string = '';\n  radiovalue: string = '';\n  // ridesAvailableList=[\"cab1\",\"cab2\",\"cab3\"];\n  PickUpridesAvailableList: AvailableRides[] = [];\n  DropridesAvailableList: AvailableRides[] = [];\n  employeePickUpList: Employee[] = [];\n  employeeDropList: Employee[] = [];\n  constructor(private adminService: AdminService, private route: Router) {}\n\n  ngOnInit(): void {\n    //This code subscribes to service defined in /service/admin ---Used to populate the table with the list of employees that opt for cab service\n    this.adminService.getEmployeePickUpDetails().subscribe((data) => {\n      this.employeePickUpList = data;\n\n      console.log(this.employeePickUpList);\n    });\n    //Sends the value selected in the drop down to the API\n    this.adminService.getEmployeeDropDetails().subscribe((data) => {\n      this.employeeDropList = data;\n\n      console.log(this.employeeDropList);\n    });\n\n    //used to repopulate the dropdown by calling the API again\n    this.adminService.getAvailablePickUpRides().subscribe((data) => {\n      this.PickUpridesAvailableList = data;\n      console.log(data);\n      console.log(this.PickUpridesAvailableList);\n    });\n    this.adminService.getAvailableDropRides().subscribe((data) => {\n      this.DropridesAvailableList = data;\n      console.log(data);\n      console.log(this.DropridesAvailableList);\n    });\n  }\n\n  async myFunctionPickUp(selectValue: string, puid: string) {\n   \n\n    let pickUpObj = {\n      RideId: selectValue,\n      Empid: puid,\n    };\n\n    /*this.adminService.updateCabList(selectValue).subscribe(\n    data => {\n      console.log(data);\n        }\n  );*/\n\n    await this.adminService.updatePickUpTable(pickUpObj).subscribe((data) => {});\n\n   this.adminService.getAvailablePickUpRides().subscribe((data) => {\n      this.PickUpridesAvailableList = data;\n      console.log(data);\n      console.log(this.PickUpridesAvailableList);\n    });\n    \n    this.adminService.getAvailablePickUpRides().subscribe((data) => {\n      this.PickUpridesAvailableList = data;\n      console.log(data);\n      console.log(this.PickUpridesAvailableList);\n    });\n  }\n\n  myFunctionDrop(selectValue: string, puid: string) {\n    let dropObj = {\n      RideId: selectValue,\n      Empid: puid,\n    };\n   \n\n    this.adminService.updateDropTable(dropObj).subscribe((data) => {});\n\n    this.adminService.getAvailableDropRides().subscribe((data) => {\n      this.DropridesAvailableList = data;\n      console.log(data);\n      console.log(this.DropridesAvailableList);\n    });\n    setTimeout(this.adminService.getAvailableDropRides,4000);\n    this.adminService.getAvailableDropRides().subscribe((data) => {\n      this.DropridesAvailableList = data;\n      console.log(data);\n      console.log(this.DropridesAvailableList);\n    });\n  }\n\n  onSubmitPickupRides() {\n    console.log(this.employeePickUpList);\n    alert('DATA SUBMITTED');\n    \n  }\n\n  onSubmitDropRides() {\n    console.log(this.employeeDropList);\n    alert('DATA SUBMITTED');\n  }\n}\n"]},"metadata":{},"sourceType":"module"}